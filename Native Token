// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract TabiToken is ERC20, Ownable {
    constructor(uint256 initialSupply) ERC20("TabiToken", "TABI") {
        _mint(msg.sender, initialSupply);
    }

    function mint(address to, uint256 amount) external onlyOwner {
        _mint(to, amount);
    }

    function burn(address from, uint256 amount) external onlyOwner {
        _burn(from, amount);
    }
}

contract TabiProtocol is Ownable {
    using SafeMath for uint256;
    using SafeERC20 for TabiToken;

    TabiToken public tabiToken;

    struct Stake {
        uint256 amount;
        uint256 timestamp;
        bool exists;
    }

    struct Proposal {
        string description;
        uint256 voteCount;
        bool executed;
        mapping(address => bool) voters;
    }

    uint256 public rewardRate; // Reward rate per second
    uint256 public totalStaked;
    uint256 public proposalCount;

    mapping(address => Stake) public stakes;
    mapping(uint256 => Proposal) public proposals;

    event Staked(address indexed user, uint256 amount);
    event Unstaked(address indexed user, uint256 amount);
    event RewardClaimed(address indexed user, uint256 reward);
    event ProposalCreated(uint256 proposalId, string description);
    event Voted(address indexed user, uint256 proposalId);
    event ProposalExecuted(uint256 proposalId);

    constructor(address tokenAddress, uint256 initialRewardRate) {
        tabiToken = TabiToken(tokenAddress);
        rewardRate = initialRewardRate;
    }

    // Staking functionality
    function stake(uint256 amount) external {
        require(amount > 0, "Cannot stake 0 tokens");

        tabiToken.safeTransferFrom(msg.sender, address(this), amount);

        if (stakes[msg.sender].exists) {
            // If already staking, calculate and claim pending rewards
            uint256 pendingReward = calculateReward(msg.sender);
            tabiToken.safeTransfer(msg.sender, pendingReward);
            emit RewardClaimed(msg.sender, pendingReward);

            stakes[msg.sender].amount = stakes[msg.sender].amount.add(amount);
        } else {
            stakes[msg.sender] = Stake(amount, block.timestamp, true);
        }

        totalStaked = totalStaked.add(amount);
        emit Staked(msg.sender, amount);
    }

    function unstake(uint256 amount) external {
        require(stakes[msg.sender].exists, "No tokens staked");
        require(stakes[msg.sender].amount >= amount, "Insufficient staked amount");

        uint256 pendingReward = calculateReward(msg.sender);
        tabiToken.safeTransfer(msg.sender, pendingReward);
        emit RewardClaimed(msg.sender, pendingReward);

        stakes[msg.sender].amount = stakes[msg.sender].amount.sub(amount);
        totalStaked = totalStaked.sub(amount);

        tabiToken.safeTransfer(msg.sender, amount);
        emit Unstaked(msg.sender, amount);
    }

    function calculateReward(address user) public view returns (uint256) {
        Stake memory stakeData = stakes[user];
        if (!stakeData.exists) return 0;

        uint256 stakedDuration = block.timestamp.sub(stakeData.timestamp);
        return stakeData.amount.mul(stakedDuration).mul(rewardRate).div(1e18);
    }

    // Governance functionality
    function createProposal(string memory description) external onlyOwner {
        proposalCount++;
        proposals[proposalCount] = Proposal(description, 0, false);

        emit ProposalCreated(proposalCount, description);
    }

    function vote(uint256 proposalId) external {
        require(proposals[proposalId].exists, "Proposal does not exist");
        require(!proposals[proposalId].voters[msg.sender], "Already voted");

        proposals[proposalId].voters[msg.sender] = true;
        proposals[proposalId].voteCount = proposals[proposalId].voteCount.add(stakes[msg.sender].amount);

        emit Voted(msg.sender, proposalId);
    }

    function executeProposal(uint256 proposalId) external onlyOwner {
        require(proposals[proposalId].exists, "Proposal does not exist");
        require(!proposals[proposalId].executed, "Proposal already executed");
        require(proposals[proposalId].voteCount > totalStaked.div(2), "Not enough votes");

        proposals[proposalId].executed = true;

        // Implement proposal logic here
        emit ProposalExecuted(proposalId);
    }

    // Owner functions
    function setRewardRate(uint256 newRewardRate) external onlyOwner {
        rewardRate = newRewardRate;
    }

    function depositTokens(uint256 amount) external onlyOwner {
        tabiToken.safeTransferFrom(msg.sender, address(this), amount);
    }

    function withdrawTokens(uint256 amount) external onlyOwner {
        tabiToken.safeTransfer(msg.sender, amount);
    }
}
